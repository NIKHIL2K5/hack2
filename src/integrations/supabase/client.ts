// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Using dummy values since we're not actually connecting to Supabase in this environment
const SUPABASE_URL = "https://zqpkpwsdqjqoqsfjohor.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpxcGtwd3NkcWpxb3FzZmpvaG9yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MTYxMzAsImV4cCI6MjA2NTk5MjEzMH0.YxO-pWSrXvODxaxplorr101i4MWU88Un6govS3KEG-Q";

// Mock Supabase client with functions implementation
const mockSupabase = {
  functions: {
    invoke: async (functionName: string, options: any) => {
      console.log(`Mock invoking Supabase function: ${functionName}`, options);
      
      // Simulate a delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Return mock data based on the function name
      if (functionName === 'chat-with-ai') {
        const { message, userRole, userName } = options.body;
        
        // Try to find a matching FAQ answer first
        try {
          // Dynamically import to avoid circular dependencies
          const { findFAQAnswer } = await import('../contexts/ai/faqData');
          const faqAnswer = findFAQAnswer(message);
          
          if (faqAnswer) {
            return { data: { content: faqAnswer } };
          }
        } catch (error) {
          console.error("Error importing FAQ data:", error);
        }
        
        // Fallback to generic responses if no FAQ match
        let response = `Hi ${userName || 'there'}! I'm Sethu, your AI assistant. `;
        
        if (message.toLowerCase().includes("job")) {
          response += "I can help you find job opportunities that match your skills and interests. Would you like me to search for specific roles or industries?";
        } else if (message.toLowerCase().includes("scheme") || message.toLowerCase().includes("funding")) {
          response += "There are several government schemes available for startups and entrepreneurs in Telangana. The T-Hub incubation program and TSIC Innovation Challenge are particularly popular.";
        } else if (message.toLowerCase().includes("profile")) {
          response += "Your profile is an important part of your presence on this platform. Make sure to keep it updated with your latest skills and experiences to improve your visibility to potential employers.";
        } else if (message.toLowerCase().includes("application")) {
          response += "You can track all your job applications through the Application Tracker. It shows real-time status updates for each position you've applied to.";
        } else if (options.body.hasImage) {
          response += "I've analyzed the image you shared. If this is a resume, I recommend highlighting your key skills more prominently and ensuring your contact information is clearly visible at the top.";
        } else {
          response += `I'm here to help with ${userRole === 'student' ? 'job searches, career planning, skill development, and interview preparation' : userRole === 'startup' ? 'funding opportunities, government schemes, hiring strategies, and business growth' : userRole === 'official' ? 'scheme management, policy implementation, and ecosystem monitoring' : 'navigating the platform and maximizing your opportunities'}. How can I assist you today?`;
        }
        
        return { data: { content: response } };
      }
      
      return { data: { content: "I'm sorry, I couldn't process that request." } };
    }
  },
  auth: {
    getSession: () => ({ data: { session: null }, error: null }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
  },
  from: () => ({
    select: () => ({ data: [], error: null }),
    insert: () => ({ data: null, error: null }),
    update: () => ({ data: null, error: null }),
    delete: () => ({ data: null, error: null }),
  }),
  storage: {
    from: () => ({
      upload: () => ({ data: { path: 'mock-path' }, error: null }),
      getPublicUrl: () => ({ data: { publicUrl: 'https://example.com/mock-image.jpg' } }),
    }),
  },
};

// Export the mock client
export const supabase = mockSupabase as unknown as ReturnType<typeof createClient<Database>>;